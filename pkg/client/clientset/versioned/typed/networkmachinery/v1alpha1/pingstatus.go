/*
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
*/
// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"time"

	v1alpha1 "github.com/networkmachinery/networkmachinery-operators/pkg/apis/networkmachinery/v1alpha1"
	scheme "github.com/networkmachinery/networkmachinery-operators/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// PingStatusesGetter has a method to return a PingStatusInterface.
// A group's client should implement this interface.
type PingStatusesGetter interface {
	PingStatuses(namespace string) PingStatusInterface
}

// PingStatusInterface has methods to work with PingStatus resources.
type PingStatusInterface interface {
	Create(*v1alpha1.PingStatus) (*v1alpha1.PingStatus, error)
	Update(*v1alpha1.PingStatus) (*v1alpha1.PingStatus, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.PingStatus, error)
	List(opts v1.ListOptions) (*v1alpha1.PingStatusList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.PingStatus, err error)
	PingStatusExpansion
}

// pingStatuses implements PingStatusInterface
type pingStatuses struct {
	client rest.Interface
	ns     string
}

// newPingStatuses returns a PingStatuses
func newPingStatuses(c *NetworkmachineryV1alpha1Client, namespace string) *pingStatuses {
	return &pingStatuses{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the pingStatus, and returns the corresponding pingStatus object, and an error if there is any.
func (c *pingStatuses) Get(name string, options v1.GetOptions) (result *v1alpha1.PingStatus, err error) {
	result = &v1alpha1.PingStatus{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("pingstatuses").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of PingStatuses that match those selectors.
func (c *pingStatuses) List(opts v1.ListOptions) (result *v1alpha1.PingStatusList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha1.PingStatusList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("pingstatuses").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested pingStatuses.
func (c *pingStatuses) Watch(opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("pingstatuses").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a pingStatus and creates it.  Returns the server's representation of the pingStatus, and an error, if there is any.
func (c *pingStatuses) Create(pingStatus *v1alpha1.PingStatus) (result *v1alpha1.PingStatus, err error) {
	result = &v1alpha1.PingStatus{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("pingstatuses").
		Body(pingStatus).
		Do().
		Into(result)
	return
}

// Update takes the representation of a pingStatus and updates it. Returns the server's representation of the pingStatus, and an error, if there is any.
func (c *pingStatuses) Update(pingStatus *v1alpha1.PingStatus) (result *v1alpha1.PingStatus, err error) {
	result = &v1alpha1.PingStatus{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("pingstatuses").
		Name(pingStatus.Name).
		Body(pingStatus).
		Do().
		Into(result)
	return
}

// Delete takes name of the pingStatus and deletes it. Returns an error if one occurs.
func (c *pingStatuses) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("pingstatuses").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *pingStatuses) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("pingstatuses").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched pingStatus.
func (c *pingStatuses) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.PingStatus, err error) {
	result = &v1alpha1.PingStatus{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("pingstatuses").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
