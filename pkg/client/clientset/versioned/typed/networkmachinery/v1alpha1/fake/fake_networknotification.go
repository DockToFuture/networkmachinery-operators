/*
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
*/
// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "github.com/networkmachinery/networkmachinery-operators/pkg/apis/networkmachinery/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeNetworkNotifications implements NetworkNotificationInterface
type FakeNetworkNotifications struct {
	Fake *FakeNetworkmachineryV1alpha1
}

var networknotificationsResource = schema.GroupVersionResource{Group: "networkmachinery.io", Version: "v1alpha1", Resource: "networknotifications"}

var networknotificationsKind = schema.GroupVersionKind{Group: "networkmachinery.io", Version: "v1alpha1", Kind: "NetworkNotification"}

// Get takes name of the networkNotification, and returns the corresponding networkNotification object, and an error if there is any.
func (c *FakeNetworkNotifications) Get(name string, options v1.GetOptions) (result *v1alpha1.NetworkNotification, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(networknotificationsResource, name), &v1alpha1.NetworkNotification{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.NetworkNotification), err
}

// List takes label and field selectors, and returns the list of NetworkNotifications that match those selectors.
func (c *FakeNetworkNotifications) List(opts v1.ListOptions) (result *v1alpha1.NetworkNotificationList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(networknotificationsResource, networknotificationsKind, opts), &v1alpha1.NetworkNotificationList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.NetworkNotificationList{ListMeta: obj.(*v1alpha1.NetworkNotificationList).ListMeta}
	for _, item := range obj.(*v1alpha1.NetworkNotificationList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested networkNotifications.
func (c *FakeNetworkNotifications) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(networknotificationsResource, opts))
}

// Create takes the representation of a networkNotification and creates it.  Returns the server's representation of the networkNotification, and an error, if there is any.
func (c *FakeNetworkNotifications) Create(networkNotification *v1alpha1.NetworkNotification) (result *v1alpha1.NetworkNotification, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(networknotificationsResource, networkNotification), &v1alpha1.NetworkNotification{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.NetworkNotification), err
}

// Update takes the representation of a networkNotification and updates it. Returns the server's representation of the networkNotification, and an error, if there is any.
func (c *FakeNetworkNotifications) Update(networkNotification *v1alpha1.NetworkNotification) (result *v1alpha1.NetworkNotification, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(networknotificationsResource, networkNotification), &v1alpha1.NetworkNotification{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.NetworkNotification), err
}

// Delete takes name of the networkNotification and deletes it. Returns an error if one occurs.
func (c *FakeNetworkNotifications) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(networknotificationsResource, name), &v1alpha1.NetworkNotification{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeNetworkNotifications) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(networknotificationsResource, listOptions)

	_, err := c.Fake.Invokes(action, &v1alpha1.NetworkNotificationList{})
	return err
}

// Patch applies the patch and returns the patched networkNotification.
func (c *FakeNetworkNotifications) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.NetworkNotification, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(networknotificationsResource, name, pt, data, subresources...), &v1alpha1.NetworkNotification{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.NetworkNotification), err
}
