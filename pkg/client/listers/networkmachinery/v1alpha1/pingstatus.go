/*
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/networkmachinery/networkmachinery-operators/pkg/apis/networkmachinery/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// PingStatusLister helps list PingStatuses.
type PingStatusLister interface {
	// List lists all PingStatuses in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.PingStatus, err error)
	// PingStatuses returns an object that can list and get PingStatuses.
	PingStatuses(namespace string) PingStatusNamespaceLister
	PingStatusListerExpansion
}

// pingStatusLister implements the PingStatusLister interface.
type pingStatusLister struct {
	indexer cache.Indexer
}

// NewPingStatusLister returns a new PingStatusLister.
func NewPingStatusLister(indexer cache.Indexer) PingStatusLister {
	return &pingStatusLister{indexer: indexer}
}

// List lists all PingStatuses in the indexer.
func (s *pingStatusLister) List(selector labels.Selector) (ret []*v1alpha1.PingStatus, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PingStatus))
	})
	return ret, err
}

// PingStatuses returns an object that can list and get PingStatuses.
func (s *pingStatusLister) PingStatuses(namespace string) PingStatusNamespaceLister {
	return pingStatusNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// PingStatusNamespaceLister helps list and get PingStatuses.
type PingStatusNamespaceLister interface {
	// List lists all PingStatuses in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.PingStatus, err error)
	// Get retrieves the PingStatus from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.PingStatus, error)
	PingStatusNamespaceListerExpansion
}

// pingStatusNamespaceLister implements the PingStatusNamespaceLister
// interface.
type pingStatusNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all PingStatuses in the indexer for a given namespace.
func (s pingStatusNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.PingStatus, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.PingStatus))
	})
	return ret, err
}

// Get retrieves the PingStatus from the indexer for a given namespace and name.
func (s pingStatusNamespaceLister) Get(name string) (*v1alpha1.PingStatus, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("pingstatus"), name)
	}
	return obj.(*v1alpha1.PingStatus), nil
}
